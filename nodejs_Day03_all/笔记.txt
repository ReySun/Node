回顾：
模块：
	module（模块）
	模块的分类：
	（1）核心模块
	（2）第三方模块
	（3）自定义模块
	Node.js在启动时运行的第一个模块称为“主模块”。
	获取主模块对象：
		process.mainModule
		require.main
	导出模块中的成员：exports.xx=xx
	引入一个外部模块：require()
	判断当前模块是否主模块：
		module===process.mainModule
	预定义的模块作用域成员：
		__dirname  //获取当前模块所在的目录
		__filename  //获取当前模块所在目录及文件名
		module      //指向当前模块自己
		module.exports  //当前模块中待导出的可供其他模块使用的对象
		exports  //指向module.exports对象的引用
		require  //引入其他模块

	创建自定义模块：
	（1）文件模块
		没有后缀的文件模块，被作为js文本加载
		.js后缀的文件模块，被作为js文本加载
		.json后缀的文件模块，被作为json字符串加载，自动解析为对象
		.node后缀的文件模块，被作为C/C++二进制加载
	（2）目录模块
		包含package.json文件目录
		包含index.js的文件
		包含index.json的文件
		包含index.node的文件
包
	目录、package.json、lib/.js、bin/.node、doc/.doc、test/test.html
	
npm――包管理器
	用于下载、安装、升级、删除、发布、维护。
	安装包：npm install 包名
		npm install 包名 -g
	更新包：npm update 包名
	删除包：npm uninstall 包名
	列出安装的包：npm ls
	生成包：npm init
	发布包：npm adduser  登录/注册
		npm publish 发布
核心模块
	console
		console.Console(out,err)//向任意指定的输出流（文件）中输出数据
	querystring
		parse()
		stringify()
	url
		parse()
		format()
	path
		parse()
		format()
		resolve(url1,url2)
		relative(url1,url2)
	DNS
		lookup()
		resolve()
		reverse()
	Util
		format()
		inspect()
		inherits()
	Buffer
		new Buffer(32);

fs模块：
	fs模块提供了文件的读写、更名、删除、遍历目录等你操作
	所有异步方法回调函数中第一个参数都是一个IO错误对象。
	fs模块中的四个class
	fs.stats		//文件或目录的统计信息的描述对象
	fs.ReadStream	//stream.Readable接口的实现对象
	fs.WriteStream	//stream.Writable借口的实现对象
	fs.FSWatcher	//用监视文件修改的文件监视器对象
	fs模块中的常用方法：
	fs.mkdir()		//创建目录
	fs.rmdir()		//删除目录
	fs.readdir()	//读取目录下的内容
	fs.readFile	()	//读取文件的内容
	fs.writeFile()	//向文件中写入内容
	fs.appendFile()	//向文件中追加内容
	fs.unlink()		//删除文件
	fs.rename()	//重命名文件

	fs.stat()		//返回一个文件或目录的统计信息对象（fs.stats对象）
	fs.stats对象的方法：
		stats.isFile()	//是否为文件
		stats.ifDirectory()	//是否为目录

	writeFile()	//如果目标文件不存在，会自动创建该文件；如果存在，会覆盖原本的内容
	appendFile()//如果目标文件不存在，会自动创建该文件；如果存在，会在原有的内容上追加新内容

http模块：
	用于创建使用HTTP协议的客户端应用和服务器端应用。
	（1）创建并发起请求消息，等待并解析响应消息――实现web客户端
	（2）接收并解析请求消息，构建并发送响应消息――实现web服务端

	http.request是一个HTTP的客户端工具
	用于向web服务器发起http请求，并获取响应数据
	方法：
		http.get()
		http.request()
	该方法的返回值http.clientRequest对象，用来描述请求信息，回调函数的参数是一个IncomingMessage对象，封装着响应信息。
	ClientRequest 常用方法：
	write( chunk )：向服务器追加请求主体数据
	end( chunk )：提交请求消息主体结束
	setTimeout( timeout , fn )：设置请求消息超时时间
	abort( )：终止请求
	ClientRequest 常用事件：
	response：接收到响应消息
	abort：请求终止事件
	error：请求发生错误
	
	使用http.request()发送请求，必须要结束:request.end()
		
	http.server：
	是一个基于事件HTTP服务器
	用于创建web服务器，接收客户端请求，返回响应消息。所有的请求都被封装在独立的事件中，只需要对事件进行处理就可用实现http服务器的功能。
	http.createServer()用于创建一个服务器应用。
	返回值：http.Server对象
	http.Server  常用方法：
	listen( port, [host] )：监听指定的服务端口
	close( )：停止服务器的运行
	setTimeout( timeout , fn )：设置服务器响应消息超时时间
	http.Server 常用事件：
	connection：出现客户端连接
	request：接收到请求消息
	close：服务器停止事件
	error：响应过程发生错误

mysql：
	sql语句的四大类：
	DDL：定义数据结构
		CREATE	创建数据库或表
		DROP	删除数据库或表
		ALERT	添加、修改、删除列
		TRUNCATE  清除表中的数据
	DML：操作数据行
		INSERT	插入数据
		DELETE	删除数据
		UPDATE	修改数据
	DQL：查询数据
		SELECT	查询
	DCL：控制用户的权限
		GRANT	授权
		REVOKE	撤回

项目：
	10天
	2.5天：静态页面
	2.5~4：boot
	5~7：AJAX
	8~10：webapp、ng















	